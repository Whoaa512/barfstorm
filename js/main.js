// Generated by CoffeeScript 1.6.3
var Card, Enemy, Game, Hand, Player, SpellCaster, board, game, randomAdj, randomName, randomTitle, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

console.log(Date.now());

randomName = (function() {
  var name;
  name = _.shuffle(['Abraham', 'Seymore', 'Isadore', 'Guy', 'Anitra', 'Eric', 'Yorick', 'Hammurabi', 'Ugdor', 'Olaf']);
  return function() {
    return name.pop();
  };
})();

randomAdj = (function() {
  var adj;
  adj = _.shuffle(['Terrifying', 'Humongous', 'Puny', 'Ridiculous', 'Average', 'Inflated', 'Over-Confident', 'Pompous', 'Irritating', 'Flatulent']);
  return function() {
    return adj.pop();
  };
})();

randomTitle = (function() {
  var title;
  title = _.shuffle(['Babooshka', 'Jester', 'Chicken Tosser', 'Troll', 'Single White Man', 'Lay-About', 'Zealot', 'Windbag', 'Huffalump', 'Weasel']);
  return function() {
    return title.pop();
  };
})();

board = {
  $container: $('#container')
};

SpellCaster = (function() {
  function SpellCaster($el) {
    this.$el = $el;
    this.$el || (this.$el = $('div'));
    this.$el.appendTo(board.$container);
    this.hand = new Hand(this);
  }

  return SpellCaster;

})();

Enemy = (function(_super) {
  __extends(Enemy, _super);

  function Enemy() {
    _ref = Enemy.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Enemy.prototype.turn = function() {};

  return Enemy;

})(SpellCaster);

Player = (function(_super) {
  __extends(Player, _super);

  function Player() {
    _ref1 = Player.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Player.prototype.turn = function() {};

  return Player;

})(SpellCaster);

Hand = (function() {
  function Hand(owner) {
    var _this = this;
    this.owner = owner;
    this.cards = [];
    _.times(5, function(i) {
      _this.cards.push(Card.createRandom(_this.owner, i));
      return _this.render();
    });
  }

  Hand.prototype.render = function() {
    return _.forEach(this.cards, function(c, i) {
      return c.render();
    });
  };

  return Hand;

})();

Card = (function() {
  function Card(title, damage, health, owner, index) {
    var wrapper,
      _this = this;
    this.title = title;
    this.damage = damage;
    this.health = health;
    this.owner = owner;
    this.index = index;
    this.alive = true;
    wrapper = $('<div class="card-container">').appendTo(this.owner.$el);
    this.$el = $("<div class='card'>").appendTo(wrapper);
    this.$el.on('click', function() {
      return _this.attack();
    });
  }

  Card.prototype.attack = function() {
    var target;
    target = game.enemy.hand.cards[this.index];
    if (target.alive) {
      this.$el.effect('shake', {
        direction: 'down',
        distance: 100,
        duration: 200
      });
      return target.takeDamage(this.damage, this.damage_type);
    }
  };

  Card.prototype.render = function() {
    return this.$el.html(["<span class='title'>" + this.title + "</span>", "<span class='damage'>a: " + this.damage + "</span>", "<span class='health'>h: " + this.health + "</span>"]);
  };

  Card.prototype.takeDamage = function(d) {
    var _this = this;
    this.health -= d;
    if (this.health <= 0) {
      this.alive = false;
      return this.$el.effect('highlight', {
        color: 'red',
        complete: function() {
          return _this.$el.effect('explode');
        }
      });
    } else {
      return this.$el.effect('highlight', {
        color: 'red',
        complete: function() {
          return _this.render();
        }
      });
    }
  };

  return Card;

})();

Card.createRandom = function(owner, i) {
  var adj, damage, health, title;
  damage = ~~(Math.random() * 3) + 2;
  health = ~~(Math.random() * 3) + 2;
  adj = randomAdj();
  title = randomTitle();
  if (adj === 'Terrifying' || adj === 'Humongous') {
    damage = 5;
  }
  if (adj === 'Ridiculous' || adj === 'Puny') {
    damage = 1;
  }
  if (title === 'Troll' || title === 'Huffalump') {
    health = 5;
  }
  if (title === 'Babooshka' || title === 'Lay-About') {
    health = 1;
  }
  return new Card("" + (randomName()) + " the " + adj + " " + title, damage, health, owner, i);
};

Game = (function() {
  function Game() {
    this.player = new Player($('#player-arena'));
    this.enemy = new Enemy($('#enemy-arena'));
    this.player.turn();
    this.enemy.turn();
  }

  return Game;

})();

game = new Game;

/*
//@ sourceMappingURL=main.map
*/
